/*
 * Copyright 2009-2018 The VOTCA Development Team (http://www.votca.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
#define BOOST_TEST_MAIN

#define BOOST_TEST_MODULE aomatrix_test
#include <boost/test/unit_test.hpp>
#include <votca/xtp/orbitals.h>
#include <votca/xtp/aomatrix.h>

using namespace votca::xtp;
using namespace votca;
using namespace std;

BOOST_AUTO_TEST_SUITE(aomatrix_test)

BOOST_AUTO_TEST_CASE(aomatrices_test) {
  
  ofstream xyzfile("molecule.xyz");
  xyzfile << " 5" << endl;
  xyzfile << " methane" << endl;
  xyzfile << " C            .000000     .000000     .000000" << endl;
  xyzfile << " H            .629118     .629118     .629118" << endl;
  xyzfile << " H           -.629118    -.629118     .629118" << endl;
  xyzfile << " H            .629118    -.629118    -.629118" << endl;
  xyzfile << " H           -.629118     .629118    -.629118" << endl;
  xyzfile.close();

  ofstream basisfile("3-21G.xml");
  basisfile <<"<basis name=\"3-21G\">" << endl;
  basisfile << "  <element name=\"H\">" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"5.447178e+00\">" << endl;
  basisfile << "        <contractions factor=\"1.562850e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"8.245470e-01\">" << endl;
  basisfile << "        <contractions factor=\"9.046910e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"1.831920e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "  </element>" << endl;
  basisfile << "  <element name=\"C\">" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"1.722560e+02\">" << endl;
  basisfile << "        <contractions factor=\"6.176690e-02\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"2.591090e+01\">" << endl;
  basisfile << "        <contractions factor=\"3.587940e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"5.533350e+00\">" << endl;
  basisfile << "        <contractions factor=\"7.007130e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"SP\">" << endl;
  basisfile << "      <constant decay=\"3.664980e+00\">" << endl;
  basisfile << "        <contractions factor=\"-3.958970e-01\" type=\"S\"/>" << endl;
  basisfile << "        <contractions factor=\"2.364600e-01\" type=\"P\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"7.705450e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.215840e+00\" type=\"S\"/>" << endl;
  basisfile << "        <contractions factor=\"8.606190e-01\" type=\"P\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"SP\">" << endl;
  basisfile << "      <constant decay=\"1.958570e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"S\"/>" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"P\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "  </element>" << endl;
  basisfile << "</basis>" << endl;
  basisfile.close();
  
  Orbitals orbitals;
  orbitals.QMAtoms().LoadFromXYZ("molecule.xyz");
  BasisSet basis;
  basis.LoadBasisSet("3-21G.xml");
  AOBasis aobasis;
  aobasis.AOBasisFill(basis,orbitals.QMAtoms());
  AOOverlap overlap;
  overlap.Fill(aobasis);
  Eigen::MatrixXd overlap_ref=Eigen::MatrixXd::Zero(17,17);
 
  overlap_ref<<
1,0.191448,0,0,0,0.180314,0,0,0,0.0189724,0.0808612,0.0189724,0.0808612,0.0189724,0.0808612,0.0189724,0.0808612,
0.191448,1.00001,0,0,0,0.761361,0,0,0,0.194748,0.401447,0.194748,0.401447,0.194748,0.401447,0.194748,0.401447,
0,0,1,0,0,0,0.528959,0,0,0.169584,0.135615,0.169584,0.135615,-0.169584,-0.135615,-0.169584,-0.135615,
0,0,0,1,0,0,0,0.528959,0,0.169584,0.135615,-0.169584,-0.135615,-0.169584,-0.135615,0.169584,0.135615,
0,0,0,0,1,0,0,0,0.528959,0.169584,0.135615,-0.169584,-0.135615,0.169584,0.135615,-0.169584,-0.135615,
0.180314,0.761361,0,0,0,1,0,0,0,0.338796,0.668849,0.338796,0.668849,0.338796,0.668849,0.338796,0.668849,
0,0,0.528959,0,0,0,1,0,0,0.290649,0.340149,0.290649,0.340149,-0.290649,-0.340149,-0.290649,-0.340149,
0,0,0,0.528959,0,0,0,1,0,0.290649,0.340149,-0.290649,-0.340149,-0.290649,-0.340149,0.290649,0.340149,
0,0,0,0,0.528959,0,0,0,1,0.290649,0.340149,-0.290649,-0.340149,0.290649,0.340149,-0.290649,-0.340149,
0.0189724,0.194748,0.169584,0.169584,0.169584,0.338796,0.290649,0.290649,0.290649,1,0.645899,0.00778321,0.116994,0.00778321,0.116994,0.00778321,0.116994,
0.0808612,0.401447,0.135615,0.135615,0.135615,0.668849,0.340149,0.340149,0.340149,0.645899,1,0.116994,0.354983,0.116994,0.354983,0.116994,0.354983,
0.0189724,0.194748,0.169584,-0.169584,-0.169584,0.338796,0.290649,-0.290649,-0.290649,0.00778321,0.116994,1,0.645899,0.00778321,0.116994,0.00778321,0.116994,
0.0808612,0.401447,0.135615,-0.135615,-0.135615,0.668849,0.340149,-0.340149,-0.340149,0.116994,0.354983,0.645899,1,0.116994,0.354983,0.116994,0.354983,
0.0189724,0.194748,-0.169584,-0.169584,0.169584,0.338796,-0.290649,-0.290649,0.290649,0.00778321,0.116994,0.00778321,0.116994,1,0.645899,0.00778321,0.116994,
0.0808612,0.401447,-0.135615,-0.135615,0.135615,0.668849,-0.340149,-0.340149,0.340149,0.116994,0.354983,0.116994,0.354983,0.645899,1,0.116994,0.354983,
0.0189724,0.194748,-0.169584,0.169584,-0.169584,0.338796,-0.290649,0.290649,-0.290649,0.00778321,0.116994,0.00778321,0.116994,0.00778321,0.116994,1,0.645899,
0.0808612,0.401447,-0.135615,0.135615,-0.135615,0.668849,-0.340149,0.340149,-0.340149,0.116994,0.354983,0.116994,0.354983,0.116994,0.354983,0.645899,1;

bool check_overlap = overlap.Matrix().isApprox(overlap_ref,0.0001);
BOOST_CHECK_EQUAL(check_overlap, 1);

AOKinetic kinetic;
kinetic.Fill(aobasis);
Eigen::MatrixXd kinetic_ref=Eigen::MatrixXd::Zero(17,17);
kinetic_ref<<16.579,-1.43503,0,0,0,0.10275,0,0,0,-0.0439437,0.0214514,-0.0439437,0.0214514,-0.0439437,0.0214514,-0.0439437,0.0214514,
-1.43503,1.35738,0,0,0,0.346414,0,0,0,-0.0154143,0.103305,-0.0154143,0.103305,-0.0154143,0.103305,-0.0154143,0.103305,
0,0,2.58667,0,0,0,0.41751,0,0,0.0928809,0.0755731,0.0928809,0.0755731,-0.0928809,-0.0755731,-0.0928809,-0.0755731,
0,0,0,2.58667,0,0,0,0.41751,0,0.0928809,0.0755731,-0.0928809,-0.0755731,-0.0928809,-0.0755731,0.0928809,0.0755731,
0,0,0,0,2.58667,0,0,0,0.41751,0.0928809,0.0755731,-0.0928809,-0.0755731,0.0928809,0.0755731,-0.0928809,-0.0755731,
0.10275,0.346414,0,0,0,0.293786,0,0,0,0.0889197,0.139112,0.0889197,0.139112,0.0889197,0.139112,0.0889197,0.139112,
0,0,0.41751,0,0,0,0.489642,0,0,0.169257,0.135141,0.169257,0.135141,-0.169257,-0.135141,-0.169257,-0.135141,
0,0,0,0.41751,0,0,0,0.489642,0,0.169257,0.135141,-0.169257,-0.135141,-0.169257,-0.135141,0.169257,0.135141,
0,0,0,0,0.41751,0,0,0,0.489642,0.169257,0.135141,-0.169257,-0.135141,0.169257,0.135141,-0.169257,-0.135141,
-0.0439437,-0.0154143,0.0928809,0.0928809,0.0928809,0.0889197,0.169257,0.169257,0.169257,1.5494,0.293152,-0.0206172,-0.00736852,-0.0206172,-0.00736852,-0.0206172,-0.00736852,
0.0214514,0.103305,0.0755731,0.0755731,0.0755731,0.139112,0.135141,0.135141,0.135141,0.293152,0.274788,-0.00736852,0.0301943,-0.00736852,0.0301943,-0.00736852,0.0301943,
-0.0439437,-0.0154143,0.0928809,-0.0928809,-0.0928809,0.0889197,0.169257,-0.169257,-0.169257,-0.0206172,-0.00736852,1.5494,0.293152,-0.0206172,-0.00736852,-0.0206172,-0.00736852,
0.0214514,0.103305,0.0755731,-0.0755731,-0.0755731,0.139112,0.135141,-0.135141,-0.135141,-0.00736852,0.0301943,0.293152,0.274788,-0.00736852,0.0301943,-0.00736852,0.0301943,
-0.0439437,-0.0154143,-0.0928809,-0.0928809,0.0928809,0.0889197,-0.169257,-0.169257,0.169257,-0.0206172,-0.00736852,-0.0206172,-0.00736852,1.5494,0.293152,-0.0206172,-0.00736852,
0.0214514,0.103305,-0.0755731,-0.0755731,0.0755731,0.139112,-0.135141,-0.135141,0.135141,-0.00736852,0.0301943,-0.00736852,0.0301943,0.293152,0.274788,-0.00736852,0.0301943,
-0.0439437,-0.0154143,-0.0928809,0.0928809,-0.0928809,0.0889197,-0.169257,0.169257,-0.169257,-0.0206172,-0.00736852,-0.0206172,-0.00736852,-0.0206172,-0.00736852,1.5494,0.293152,
0.0214514,0.103305,-0.0755731,0.0755731,-0.0755731,0.139112,-0.135141,0.135141,-0.135141,-0.00736852,0.0301943,-0.00736852,0.0301943,-0.00736852,0.0301943,0.293152,0.274788;

bool check_kinetic = kinetic.Matrix().isApprox(kinetic_ref,0.00001);
BOOST_CHECK_EQUAL(check_kinetic, 1);

AOCoulomb coulomb;
coulomb.Fill(aobasis);
Eigen::MatrixXd coulomb_ref=Eigen::MatrixXd::Zero(17,17);
coulomb_ref<<1.66592,4.0152,0,0,0,5.96515,0,0,0,1.86584,4.83598,1.86584,4.83598,1.86584,4.83598,1.86584,4.83598,
4.0152,18.379,0,0,0,31.3743,0,0,0,10.3031,26.6091,10.3031,26.6091,10.3031,26.6091,10.3031,26.6091,
0,0,4.75942,0,0,0,7.02939,0,0,1.96588,2.48722,1.96588,2.48722,-1.96588,-2.48722,-1.96588,-2.48722,
0,0,0,4.75942,0,0,0,7.02939,0,1.96588,2.48722,-1.96588,-2.48722,-1.96588,-2.48722,1.96588,2.48722,
0,0,0,0,4.75942,0,0,0,7.02939,1.96588,2.48722,-1.96588,-2.48722,1.96588,2.48722,-1.96588,-2.48722,
5.96515,31.3743,0,0,0,64.1609,0,0,0,21.3671,58.4239,21.3671,58.4239,21.3671,58.4239,21.3671,58.4239,
0,0,7.02939,0,0,0,21.387,0,0,5.07919,8.88641,5.07919,8.88641,-5.07919,-8.88641,-5.07919,-8.88641,
0,0,0,7.02939,0,0,0,21.387,0,5.07919,8.88641,-5.07919,-8.88641,-5.07919,-8.88641,5.07919,8.88641,
0,0,0,0,7.02939,0,0,0,21.387,5.07919,8.88641,-5.07919,-8.88641,5.07919,8.88641,-5.07919,-8.88641,
1.86584,10.3031,1.96588,1.96588,1.96588,21.3671,5.07919,5.07919,5.07919,13.9085,26.8615,5.54669,17.0411,5.54669,17.0411,5.54669,17.0411,
4.83598,26.6091,2.48722,2.48722,2.48722,58.4239,8.88641,8.88641,8.88641,26.8615,68.5967,17.0411,50.7702,17.0411,50.7702,17.0411,50.7702,
1.86584,10.3031,1.96588,-1.96588,-1.96588,21.3671,5.07919,-5.07919,-5.07919,5.54669,17.0411,13.9085,26.8615,5.54669,17.0411,5.54669,17.0411,
4.83598,26.6091,2.48722,-2.48722,-2.48722,58.4239,8.88641,-8.88641,-8.88641,17.0411,50.7702,26.8615,68.5967,17.0411,50.7702,17.0411,50.7702,
1.86584,10.3031,-1.96588,-1.96588,1.96588,21.3671,-5.07919,-5.07919,5.07919,5.54669,17.0411,5.54669,17.0411,13.9085,26.8615,5.54669,17.0411,
4.83598,26.6091,-2.48722,-2.48722,2.48722,58.4239,-8.88641,-8.88641,8.88641,17.0411,50.7702,17.0411,50.7702,26.8615,68.5967,17.0411,50.7702,
1.86584,10.3031,-1.96588,1.96588,-1.96588,21.3671,-5.07919,5.07919,-5.07919,5.54669,17.0411,5.54669,17.0411,5.54669,17.0411,13.9085,26.8615,
4.83598,26.6091,-2.48722,2.48722,-2.48722,58.4239,-8.88641,8.88641,-8.88641,17.0411,50.7702,17.0411,50.7702,17.0411,50.7702,26.8615,68.5967;
bool check_coulomb = coulomb.Matrix().isApprox(coulomb_ref,0.00001);
if(!check_coulomb){
 cout<<"ref"<<endl;
   cout<<coulomb_ref<<endl;
    cout<<"result"<<endl;
   cout<<coulomb.Matrix()<<endl;
 }
BOOST_CHECK_EQUAL(check_coulomb, 1);

coulomb.Pseudo_InvSqrt(1e-7);
Eigen::MatrixXd coulombinvsqrt_ref=Eigen::MatrixXd::Zero(17,17);
coulombinvsqrt_ref<<1.6659153595,4.0151975735,0,0,0,5.9651489891,0,0,0,1.8658410271,4.8359823061,1.8658410271,4.8359823061,1.8658410271,4.8359823061,1.8658410271,4.8359823061,
4.0151975735,18.378952637,0,0,0,31.374258628,0,0,0,10.303062989,26.609117042,10.303062989,26.609117042,10.303062989,26.609117042,10.303062989,26.609117042,
0,0,4.7594244166,0,0,0,7.0293902091,0,0,1.9658834037,2.4872154307,1.9658834037,2.4872154307,-1.9658834037,-2.4872154307,-1.9658834037,-2.4872154307,
0,0,0,4.7594244166,0,0,0,7.0293902091,0,1.9658834037,2.4872154307,-1.9658834037,-2.4872154307,-1.9658834037,-2.4872154307,1.9658834037,2.4872154307,
0,0,0,0,4.7594244166,0,0,0,7.0293902091,1.9658834037,2.4872154307,-1.9658834037,-2.4872154307,1.9658834037,2.4872154307,-1.9658834037,-2.4872154307,
5.9651489891,31.374258628,0,0,0,64.160947091,0,0,0,21.367082884,58.423867269,21.367082884,58.423867269,21.367082884,58.423867269,21.367082884,58.423867269,
0,0,7.0293902091,0,0,0,21.386982364,0,0,5.0791868054,8.8864083237,5.0791868054,8.8864083237,-5.0791868054,-8.8864083237,-5.0791868054,-8.8864083237,
0,0,0,7.0293902091,0,0,0,21.386982364,0,5.0791868054,8.8864083237,-5.0791868054,-8.8864083237,-5.0791868054,-8.8864083237,5.0791868054,8.8864083237,
0,0,0,0,7.0293902091,0,0,0,21.386982364,5.0791868054,8.8864083237,-5.0791868054,-8.8864083237,5.0791868054,8.8864083237,-5.0791868054,-8.8864083237,
1.8658410271,10.303062989,1.9658834037,1.9658834037,1.9658834037,21.367082884,5.0791868054,5.0791868054,5.0791868054,13.908456951,26.861509511,5.5466937828,17.041106037,5.5466937828,17.041106037,5.5466937828,17.041106037,
4.8359823061,26.609117042,2.4872154307,2.4872154307,2.4872154307,58.423867269,8.8864083237,8.8864083237,8.8864083237,26.861509511,68.596721551,17.041106037,50.770206191,17.041106037,50.770206191,17.041106037,50.770206191,
1.8658410271,10.303062989,1.9658834037,-1.9658834037,-1.9658834037,21.367082884,5.0791868054,-5.0791868054,-5.0791868054,5.5466937828,17.041106037,13.908456951,26.861509511,5.5466937828,17.041106037,5.5466937828,17.041106037,
4.8359823061,26.609117042,2.4872154307,-2.4872154307,-2.4872154307,58.423867269,8.8864083237,-8.8864083237,-8.8864083237,17.041106037,50.770206191,26.861509511,68.596721551,17.041106037,50.770206191,17.041106037,50.770206191,
1.8658410271,10.303062989,-1.9658834037,-1.9658834037,1.9658834037,21.367082884,-5.0791868054,-5.0791868054,5.0791868054,5.5466937828,17.041106037,5.5466937828,17.041106037,13.908456951,26.861509511,5.5466937828,17.041106037,
4.8359823061,26.609117042,-2.4872154307,-2.4872154307,2.4872154307,58.423867269,-8.8864083237,-8.8864083237,8.8864083237,17.041106037,50.770206191,17.041106037,50.770206191,26.861509511,68.596721551,17.041106037,50.770206191,
1.8658410271,10.303062989,-1.9658834037,1.9658834037,-1.9658834037,21.367082884,-5.0791868054,5.0791868054,-5.0791868054,5.5466937828,17.041106037,5.5466937828,17.041106037,5.5466937828,17.041106037,13.908456951,26.861509511,
4.8359823061,26.609117042,-2.4872154307,2.4872154307,-2.4872154307,58.423867269,-8.8864083237,8.8864083237,-8.8864083237,17.041106037,50.770206191,17.041106037,50.770206191,17.041106037,50.770206191,26.861509511,68.596721551;
bool check_coulombinvsqrt = coulomb.Matrix().isApprox(coulombinvsqrt_ref,0.00001);
if(!check_coulombinvsqrt){
 cout<<"ref"<<endl;
   cout<<coulombinvsqrt_ref<<endl;
    cout<<"result"<<endl;
   cout<<coulomb.Matrix()<<endl;
 }
BOOST_CHECK_EQUAL(check_coulombinvsqrt, 1);

coulomb.Fill(aobasis);
coulomb.Pseudo_InvSqrt_GWBSE(overlap,1e-7);
Eigen::MatrixXd coulombinvsqrtgw_ref=Eigen::MatrixXd::Zero(17,17);
coulombinvsqrtgw_ref<<1.6659153595,4.0151975735,0,0,0,5.9651489891,0,0,0,1.8658410271,4.8359823061,1.8658410271,4.8359823061,1.8658410271,4.8359823061,1.8658410271,4.8359823061,
4.0151975735,18.378952637,0,0,0,31.374258628,0,0,0,10.303062989,26.609117042,10.303062989,26.609117042,10.303062989,26.609117042,10.303062989,26.609117042,
0,0,4.7594244166,0,0,0,7.0293902091,0,0,1.9658834037,2.4872154307,1.9658834037,2.4872154307,-1.9658834037,-2.4872154307,-1.9658834037,-2.4872154307,
0,0,0,4.7594244166,0,0,0,7.0293902091,0,1.9658834037,2.4872154307,-1.9658834037,-2.4872154307,-1.9658834037,-2.4872154307,1.9658834037,2.4872154307,
0,0,0,0,4.7594244166,0,0,0,7.0293902091,1.9658834037,2.4872154307,-1.9658834037,-2.4872154307,1.9658834037,2.4872154307,-1.9658834037,-2.4872154307,
5.9651489891,31.374258628,0,0,0,64.160947091,0,0,0,21.367082884,58.423867269,21.367082884,58.423867269,21.367082884,58.423867269,21.367082884,58.423867269,
0,0,7.0293902091,0,0,0,21.386982364,0,0,5.0791868054,8.8864083237,5.0791868054,8.8864083237,-5.0791868054,-8.8864083237,-5.0791868054,-8.8864083237,
0,0,0,7.0293902091,0,0,0,21.386982364,0,5.0791868054,8.8864083237,-5.0791868054,-8.8864083237,-5.0791868054,-8.8864083237,5.0791868054,8.8864083237,
0,0,0,0,7.0293902091,0,0,0,21.386982364,5.0791868054,8.8864083237,-5.0791868054,-8.8864083237,5.0791868054,8.8864083237,-5.0791868054,-8.8864083237,
1.8658410271,10.303062989,1.9658834037,1.9658834037,1.9658834037,21.367082884,5.0791868054,5.0791868054,5.0791868054,13.908456951,26.861509511,5.5466937828,17.041106037,5.5466937828,17.041106037,5.5466937828,17.041106037,
4.8359823061,26.609117042,2.4872154307,2.4872154307,2.4872154307,58.423867269,8.8864083237,8.8864083237,8.8864083237,26.861509511,68.596721551,17.041106037,50.770206191,17.041106037,50.770206191,17.041106037,50.770206191,
1.8658410271,10.303062989,1.9658834037,-1.9658834037,-1.9658834037,21.367082884,5.0791868054,-5.0791868054,-5.0791868054,5.5466937828,17.041106037,13.908456951,26.861509511,5.5466937828,17.041106037,5.5466937828,17.041106037,
4.8359823061,26.609117042,2.4872154307,-2.4872154307,-2.4872154307,58.423867269,8.8864083237,-8.8864083237,-8.8864083237,17.041106037,50.770206191,26.861509511,68.596721551,17.041106037,50.770206191,17.041106037,50.770206191,
1.8658410271,10.303062989,-1.9658834037,-1.9658834037,1.9658834037,21.367082884,-5.0791868054,-5.0791868054,5.0791868054,5.5466937828,17.041106037,5.5466937828,17.041106037,13.908456951,26.861509511,5.5466937828,17.041106037,
4.8359823061,26.609117042,-2.4872154307,-2.4872154307,2.4872154307,58.423867269,-8.8864083237,-8.8864083237,8.8864083237,17.041106037,50.770206191,17.041106037,50.770206191,26.861509511,68.596721551,17.041106037,50.770206191,
1.8658410271,10.303062989,-1.9658834037,1.9658834037,-1.9658834037,21.367082884,-5.0791868054,5.0791868054,-5.0791868054,5.5466937828,17.041106037,5.5466937828,17.041106037,5.5466937828,17.041106037,13.908456951,26.861509511,
4.8359823061,26.609117042,-2.4872154307,2.4872154307,-2.4872154307,58.423867269,-8.8864083237,8.8864083237,-8.8864083237,17.041106037,50.770206191,17.041106037,50.770206191,17.041106037,50.770206191,26.861509511,68.596721551;
bool check_coulombinvsqrtgw = coulomb.Matrix().isApprox(coulombinvsqrtgw_ref,0.00001);
if(!check_coulombinvsqrtgw){
 cout<<"ref"<<endl;
   cout<<coulombinvsqrtgw_ref<<endl;
    cout<<"result"<<endl;
   cout<<coulomb.Matrix()<<endl;
 }
BOOST_CHECK_EQUAL(check_coulombinvsqrtgw, 1);




AOESP esp;
esp.Fillnucpotential(aobasis,orbitals.QMAtoms());
Eigen::MatrixXd esp_ref=Eigen::MatrixXd::Zero(17,17);

esp_ref<<0.485633,0.0929737,-0.0112854,0.0112854,-0.0112854,0.0875665,-0.00167437,0.00167437,-0.00167437,0.00881413,0.0388865,0.00881413,0.0388865,0.00881413,0.0388865,0.010454,0.0404184,
0.0929737,0.485422,-0.0825499,0.0825499,-0.0825499,0.367955,-0.0505522,0.0505522,-0.0505522,0.0731397,0.178738,0.0731397,0.178738,0.0731397,0.178738,0.194659,0.240204,
-0.0112854,-0.0825499,0.485023,-0.0299598,0.0299598,-0.0781392,0.252799,-0.0256949,0.0256949,0.0563721,0.0217104,0.0563721,0.0217104,-0.0677234,-0.0882558,-0.197548,-0.133855,
0.0112854,0.0825499,-0.0299598,0.485023,-0.0299598,0.0781392,-0.0256949,0.252799,-0.0256949,0.0677234,0.0882558,-0.0563721,-0.0217104,-0.0563721,-0.0217104,0.197548,0.133855,
-0.0112854,-0.0825499,0.0299598,-0.0299598,0.485023,-0.0781392,0.0256949,-0.0256949,0.252799,0.0563721,0.0217104,-0.0677234,-0.0882558,0.0563721,0.0217104,-0.197548,-0.133855,
0.0875665,0.367955,-0.0781392,0.0781392,-0.0781392,0.452433,-0.100822,0.100822,-0.100822,0.110741,0.253817,0.110741,0.253817,0.110741,0.253817,0.391022,0.405943,
-0.00167437,-0.0505522,0.252799,-0.0256949,0.0256949,-0.100822,0.407715,-0.0510951,0.0510951,0.084227,0.0617612,0.084227,0.0617612,-0.0960714,-0.152532,-0.362371,-0.271961,
0.00167437,0.0505522,-0.0256949,0.252799,-0.0256949,0.100822,-0.0510951,0.407715,-0.0510951,0.0960714,0.152532,-0.084227,-0.0617612,-0.084227,-0.0617612,0.362371,0.271961,
-0.00167437,-0.0505522,0.0256949,-0.0256949,0.252799,-0.100822,0.0510951,-0.0510951,0.407715,0.084227,0.0617612,-0.0960714,-0.152532,0.084227,0.0617612,-0.362371,-0.271961,
0.00881413,0.0731397,0.0563721,0.0677234,0.0563721,0.110741,0.084227,0.0960714,0.084227,0.297388,0.192083,0.0026714,0.0376198,0.0026714,0.0376198,0.00464633,0.042269,
0.0388865,0.178738,0.0217104,0.0882558,0.0217104,0.253817,0.0617612,0.152532,0.0617612,0.192083,0.2962,0.0376198,0.120354,0.0376198,0.120354,0.124795,0.179447,
0.00881413,0.0731397,0.0563721,-0.0563721,-0.0677234,0.110741,0.084227,-0.084227,-0.0960714,0.0026714,0.0376198,0.297388,0.192083,0.0026714,0.0376198,0.00464633,0.042269,
0.0388865,0.178738,0.0217104,-0.0217104,-0.0882558,0.253817,0.0617612,-0.0617612,-0.152532,0.0376198,0.120354,0.192083,0.2962,0.0376198,0.120354,0.124795,0.179447,
0.00881413,0.0731397,-0.0677234,-0.0563721,0.0563721,0.110741,-0.0960714,-0.084227,0.084227,0.0026714,0.0376198,0.0026714,0.0376198,0.297388,0.192083,0.00464633,0.042269,
0.0388865,0.178738,-0.0882558,-0.0217104,0.0217104,0.253817,-0.152532,-0.0617612,0.0617612,0.0376198,0.120354,0.0376198,0.120354,0.192083,0.2962,0.124795,0.179447,
0.010454,0.194659,-0.197548,0.197548,-0.197548,0.391022,-0.362371,0.362371,-0.362371,0.00464633,0.124795,0.00464633,0.124795,0.00464633,0.124795,1.72092,0.782663,
0.0404184,0.240204,-0.133855,0.133855,-0.133855,0.405943,-0.271961,0.271961,-0.271961,0.042269,0.179447,0.042269,0.179447,0.042269,0.179447,0.782663,0.683004;

bool check_esp = esp.Matrix().isApprox(esp_ref,0.00001);
BOOST_CHECK_EQUAL(check_esp, 1);

ofstream ecpfile("ecp.xml");
ecpfile << "<pseudopotential name=\"ECP_STUTTGART\">" << endl;
ecpfile << "  <element name=\"C\" lmax=\"3\" ncore=\"2\">" << endl;
ecpfile << "    <shell type=\"F\"><constant power=\"2\" decay=\"1.0\" contraction=\"0.0\"></constant></shell>" << endl;
ecpfile << "    <shell type=\"S\"><constant power=\"2\" decay=\"6.40105200\" contraction=\"33.12163800\"></constant></shell>" << endl;
ecpfile << "    <shell type=\"P\"><constant power=\"2\" decay=\"7.30774700\" contraction=\"-1.98625700\"></constant></shell>" << endl;
ecpfile << "    <shell type=\"D\"><constant power=\"2\" decay=\"5.96179600\" contraction=\"-9.45431800\"></constant></shell>" << endl;
ecpfile << "  </element>" << endl;
ecpfile << "</pseudopotential>" << endl;

BasisSet ecps;
ecps.LoadPseudopotentialSet("ecp.xml");
AOBasis ecpbasis;
ecpbasis.ECPFill(ecps,orbitals.QMAtoms());

AOECP ecp;
ecp.setECP(&ecpbasis);
ecp.Fill(aobasis);
Eigen::MatrixXd ecp_ref= Eigen::MatrixXd::Zero(17,17);
ecp_ref<<21.6188,1.34835,0,0,0,2.29744,0,0,0,0.209711,1.01592,0.209711,1.01592,0.209711,1.01592,0.209711,1.01592,
1.34835,0.702249,0,0,0,0.4993,0,0,0,0.0564639,0.225665,0.0564639,0.225665,0.0564639,0.225665,0.0564639,0.225665,
0,0,-0.0737545,0,0,0,-0.00882987,0,0,-0.00178626,-0.00193605,-0.00178626,-0.00193605,0.00178626,0.00193605,0.00178626,0.00193605,
0,0,0,-0.0737545,0,0,0,-0.00882987,0,-0.00178626,-0.00193605,0.00178626,0.00193605,0.00178626,0.00193605,-0.00178626,-0.00193605,
0,0,0,0,-0.0737545,0,0,0,-0.00882987,-0.00178626,-0.00193605,0.00178626,0.00193605,-0.00178626,-0.00193605,0.00178626,0.00193605,
2.29744,0.4993,0,0,0,0.458665,0,0,0,0.0477375,0.20545,0.0477375,0.20545,0.0477375,0.20545,0.0477375,0.20545,
0,0,-0.00882987,0,0,0,-0.0011596,0,0,-0.000240513,-0.000255319,-0.000240513,-0.000255319,0.000240513,0.000255319,0.000240513,0.000255319,
0,0,0,-0.00882987,0,0,0,-0.0011596,0,-0.000240513,-0.000255319,0.000240513,0.000255319,0.000240513,0.000255319,-0.000240513,-0.000255319,
0,0,0,0,-0.00882987,0,0,0,-0.0011596,-0.000240513,-0.000255319,0.000240513,0.000255319,-0.000240513,-0.000255319,0.000240513,0.000255319,
0.209711,0.0564639,-0.00178626,-0.00178626,-0.00178626,0.0477375,-0.000240513,-0.000240513,-0.000240513,0.00468574,0.0212243,0.0052935,0.0215396,0.0052935,0.0215396,0.0052935,0.0215396,
1.01592,0.225665,-0.00193605,-0.00193605,-0.00193605,0.20545,-0.000255319,-0.000255319,-0.000255319,0.0212243,0.0918741,0.0215396,0.0921252,0.0215396,0.0921252,0.0215396,0.0921252,
0.209711,0.0564639,-0.00178626,0.00178626,0.00178626,0.0477375,-0.000240513,0.000240513,0.000240513,0.0052935,0.0215396,0.00468574,0.0212243,0.0052935,0.0215396,0.0052935,0.0215396,
1.01592,0.225665,-0.00193605,0.00193605,0.00193605,0.20545,-0.000255319,0.000255319,0.000255319,0.0215396,0.0921252,0.0212243,0.0918741,0.0215396,0.0921252,0.0215396,0.0921252,
0.209711,0.0564639,0.00178626,0.00178626,-0.00178626,0.0477375,0.000240513,0.000240513,-0.000240513,0.0052935,0.0215396,0.0052935,0.0215396,0.00468574,0.0212243,0.0052935,0.0215396,
1.01592,0.225665,0.00193605,0.00193605,-0.00193605,0.20545,0.000255319,0.000255319,-0.000255319,0.0215396,0.0921252,0.0215396,0.0921252,0.0212243,0.0918741,0.0215396,0.0921252,
0.209711,0.0564639,0.00178626,-0.00178626,0.00178626,0.0477375,0.000240513,-0.000240513,0.000240513,0.0052935,0.0215396,0.0052935,0.0215396,0.0052935,0.0215396,0.00468574,0.0212243,
1.01592,0.225665,0.00193605,-0.00193605,0.00193605,0.20545,0.000255319,-0.000255319,0.000255319,0.0215396,0.0921252,0.0215396,0.0921252,0.0215396,0.0921252,0.0212243,0.0918741;

bool check_ecp = ecp.Matrix().isApprox(ecp_ref,0.00001);
BOOST_CHECK_EQUAL(check_ecp, 1);

}

BOOST_AUTO_TEST_CASE(externalmatrices_test){
  Orbitals orbitals;
  orbitals.QMAtoms().LoadFromXYZ("molecule.xyz");
  BasisSet basis;
  basis.LoadBasisSet("3-21G.xml");
  AOBasis aobasis;
  aobasis.AOBasisFill(basis,orbitals.QMAtoms());
  
ofstream mpsfile("polarsite.mps");
mpsfile<<"! One Site"<<endl;
mpsfile<<"! N=1 "<<endl;
mpsfile<<"Units angstrom"<<endl;
mpsfile<<"  C +0 0 3 Rank 2"<<endl;
mpsfile<<"+0"<<endl;
mpsfile<<"10 0 0"<<endl;
mpsfile<<"     100 0 0 0 0"<<endl;
mpsfile<<"P +1.9445387 +0.0000000 +0.0000000 +1.9445387 +0.0000000 +1.9445387 "<<endl;

auto polar_segments = std::make_shared<MMRegion>();
                PolarSegment seg=PolarSegment("",0);
                seg.LoadFromMPS("polarsite.mps");
                polar_segments->push_back(seg);

AODipole_Potential dip;
dip.Fillextpotential(aobasis,polar_segments);
  
  Eigen::MatrixXd dip_ref= Eigen::MatrixXd::Zero(17,17);
  dip_ref<<0.31114997753,0.059568868026,0.0090978711864,0,0,0.056104697636,0.0013498178976,0,0,0.0061933281198,0.025459181656,0.0061933281198,0.025459181656,0.0056130806569,0.024860733171,0.0056130806569,0.024860733171,
0.059568868026,0.31114997753,0.066842196408,0,0,0.2368963398,0.042609848798,0,0,0.073695437658,0.13588175121,0.073695437658,0.13588175121,0.047134059517,0.11392427425,0.047134059517,0.11392427425,
0.0090978711864,0.066842196408,0.32666220712,0,0,0.065599720802,0.17980265473,0,0,0.075224551189,0.083547839473,0.075224551189,0.083547839473,-0.035337083996,-0.0087046753266,-0.035337083996,-0.0087046753266,
0,0,0,0.30339386273,0,0,0,0.15697695635,0,0.061346561258,0.043126415371,-0.061346561258,-0.043126415371,-0.040820728861,-0.037257483146,0.040820728861,0.037257483146,
0,0,0,0,0.30339386273,0,0,0,0.15697695635,0.061346561258,0.043126415371,-0.061346561258,-0.043126415371,0.040820728861,0.037257483146,-0.040820728861,-0.037257483146,
0.056104697636,0.2368963398,0.065599720802,0,0,0.31114557005,0.12399363244,0,0,0.13566608278,0.24813270723,0.13566608278,0.24813270723,0.072222745084,0.16730389611,0.072222745084,0.16730389611,
0.0013498178976,0.042609848798,0.17980265473,0,0,0.12399363244,0.38517412728,0,0,0.13766652824,0.2355220863,0.13766652824,0.2355220863,-0.05335528609,-0.024078433641,-0.05335528609,-0.024078433641,
0,0,0,0.15697695635,0,0,0,0.27407784996,0,0.10959962132,0.10744652669,-0.10959962132,-0.10744652669,-0.060016250362,-0.076591108649,0.060016250362,0.076591108649,
0,0,0,0,0.15697695635,0,0,0,0.27407784996,0.10959962132,0.10744652669,-0.10959962132,-0.10744652669,0.060016250362,0.076591108649,-0.060016250362,-0.076591108649,
0.0061933281198,0.073695437658,0.075224551189,0.061346561258,0.061346561258,0.13566608278,0.13766652824,0.10959962132,0.10959962132,0.40885081105,0.26407630555,0.0038749978449,0.053453882722,0.002270661607,0.043208755867,0.002270661607,0.043208755867,
0.025459181656,0.13588175121,0.083547839473,0.043126415371,0.043126415371,0.24813270723,0.2355220863,0.10744652669,0.10744652669,0.26407630555,0.40853020343,0.053453882722,0.17647932404,0.026292260419,0.10354578683,0.026292260419,0.10354578683,
0.0061933281198,0.073695437658,0.075224551189,-0.061346561258,-0.061346561258,0.13566608278,0.13766652824,-0.10959962132,-0.10959962132,0.0038749978449,0.053453882722,0.40885081105,0.26407630555,0.002270661607,0.043208755867,0.002270661607,0.043208755867,
0.025459181656,0.13588175121,0.083547839473,-0.043126415371,-0.043126415371,0.24813270723,0.2355220863,-0.10744652669,-0.10744652669,0.053453882722,0.17647932404,0.26407630555,0.40853020343,0.026292260419,0.10354578683,0.026292260419,0.10354578683,
0.0056130806569,0.047134059517,-0.035337083996,-0.040820728861,0.040820728861,0.072222745084,-0.05335528609,-0.060016250362,0.060016250362,0.002270661607,0.026292260419,0.002270661607,0.026292260419,0.19479973371,0.12582094161,0.001654409346,0.023957628139,
0.024860733171,0.11392427425,-0.0087046753266,-0.037257483146,0.037257483146,0.16730389611,-0.024078433641,-0.076591108649,0.076591108649,0.043208755867,0.10354578683,0.043208755867,0.10354578683,0.12582094161,0.19479972247,0.023957628139,0.075477416664,
0.0056130806569,0.047134059517,-0.035337083996,0.040820728861,-0.040820728861,0.072222745084,-0.05335528609,0.060016250362,-0.060016250362,0.002270661607,0.026292260419,0.002270661607,0.026292260419,0.001654409346,0.023957628139,0.19479973371,0.12582094161,
0.024860733171,0.11392427425,-0.0087046753266,0.037257483146,-0.037257483146,0.16730389611,-0.024078433641,0.076591108649,-0.076591108649,0.043208755867,0.10354578683,0.043208755867,0.10354578683,0.023957628139,0.075477416664,0.12582094161,0.19479972247;
  
   bool dip_check=dip_ref.isApprox(dip.Matrix(),1e-5);
  BOOST_CHECK_EQUAL(dip_check, 1);
  if(!dip_check){
    std::cout<<"dip Ref"<<endl;
    std::cout<<dip_ref<<endl;     
    std::cout<<"Dip"<<endl;
    std::cout<<dip.Matrix()<<endl;     
  }
  
  AOQuadrupole_Potential quad;
  quad.Fillextpotential(aobasis,polar_segments);
  
  Eigen::MatrixXd quad_ref= Eigen::MatrixXd::Zero(17,17);
  quad_ref<<-0.54885754461,-0.10507737426,-0.024072484017,0,0,-0.098966700337,-0.0035715464751,0,0,-0.011179037808,-0.045172910673,-0.011179037808,-0.045172910673,-0.0096466958333,-0.043589632176,-0.0096466958333,-0.043589632176,
-0.10507737426,-0.54885754461,-0.17686090204,0,0,-0.41787675648,-0.11274339711,0,0,-0.13976724915,-0.24922034653,-0.13976724915,-0.24922034653,-0.072122590024,-0.19138301686,-0.072122590024,-0.19138301686,
-0.024072484017,-0.17686090204,-0.60358359226,0,0,-0.17357337756,-0.34400799982,0,0,-0.15272516987,-0.18718118563,-0.15272516987,-0.18718118563,0.049819674744,-0.010744186374,0.049819674744,-0.010744186374,
0,0,0,-0.52149452079,0,0,0,-0.26348055222,0,-0.11179427451,-0.074503486364,0.11179427451,0.074503486364,0.061741084451,0.060158153131,-0.061741084451,-0.060158153131,
0,0,0,0,-0.52149452079,0,0,0,-0.26348055222,-0.11179427451,-0.074503486364,0.11179427451,0.074503486364,-0.061741084451,-0.060158153131,0.061741084451,0.060158153131,
-0.098966700337,-0.41787675648,-0.17357337756,0,0,-0.54878692407,-0.32778400061,0,0,-0.25462737209,-0.46846679465,-0.25462737209,-0.46846679465,-0.10214301985,-0.26126296427,-0.10214301985,-0.26126296427,
-0.0035715464751,-0.11274339711,-0.34400799982,0,0,-0.32778400061,-0.80862341594,0,0,-0.27550032049,-0.54212154917,-0.27550032049,-0.54212154917,0.069746857669,-0.008774945581,0.069746857669,-0.008774945581,
0,0,0,-0.26348055222,0,0,0,-0.41807747815,0,-0.19230399467,-0.16717978258,0.19230399467,0.16717978258,0.082086844704,0.10623084333,-0.082086844704,-0.10623084333,
0,0,0,0,-0.26348055222,0,0,0,-0.41807747815,-0.19230399467,-0.16717978258,0.19230399467,0.16717978258,-0.082086844704,-0.10623084333,0.082086844704,0.10623084333,
-0.011179037808,-0.13976724915,-0.15272516987,-0.11179427451,-0.11179427451,-0.25462737209,-0.27550032049,-0.19230399467,-0.19230399467,-0.74359826632,-0.48028932852,-0.008644060733,-0.10930647188,-0.0037525383686,-0.077959498143,-0.0037525383686,-0.077959498143,
-0.045172910673,-0.24922034653,-0.18718118563,-0.074503486364,-0.074503486364,-0.46846679465,-0.54212154917,-0.16717978258,-0.16717978258,-0.48028932852,-0.73992811949,-0.10930647188,-0.39011966636,-0.038016753712,-0.1710846496,-0.038016753712,-0.1710846496,
-0.011179037808,-0.13976724915,-0.15272516987,0.11179427451,0.11179427451,-0.25462737209,-0.27550032049,0.19230399467,0.19230399467,-0.008644060733,-0.10930647188,-0.74359826632,-0.48028932852,-0.0037525383686,-0.077959498143,-0.0037525383686,-0.077959498143,
-0.045172910673,-0.24922034653,-0.18718118563,0.074503486364,0.074503486364,-0.46846679465,-0.54212154917,0.16717978258,0.16717978258,-0.10930647188,-0.39011966636,-0.48028932852,-0.73992811949,-0.038016753712,-0.1710846496,-0.038016753712,-0.1710846496,
-0.0096466958333,-0.072122590024,0.049819674744,0.061741084451,-0.061741084451,-0.10214301985,0.069746857669,0.082086844704,-0.082086844704,-0.0037525383686,-0.038016753712,-0.0037525383686,-0.038016753712,-0.25989585987,-0.16786646053,-0.0024117505537,-0.033638947738,
-0.043589632176,-0.19138301686,-0.010744186374,0.060158153131,-0.060158153131,-0.26126296427,-0.008774945581,0.10623084333,-0.10623084333,-0.077959498143,-0.1710846496,-0.077959498143,-0.1710846496,-0.16786646053,-0.259895667,-0.033638947738,-0.11005918435,
-0.0096466958333,-0.072122590024,0.049819674744,-0.061741084451,0.061741084451,-0.10214301985,0.069746857669,-0.082086844704,0.082086844704,-0.0037525383686,-0.038016753712,-0.0037525383686,-0.038016753712,-0.0024117505537,-0.033638947738,-0.25989585987,-0.16786646053,
-0.043589632176,-0.19138301686,-0.010744186374,-0.060158153131,0.060158153131,-0.26126296427,-0.008774945581,-0.10623084333,0.10623084333,-0.077959498143,-0.1710846496,-0.077959498143,-0.1710846496,-0.033638947738,-0.11005918435,-0.16786646053,-0.259895667;
  bool quad_check=quad_ref.isApprox(quad.Matrix(),1e-5);
  BOOST_CHECK_EQUAL(quad_check, 1);
  if(!quad_check){
    std::cout<<"Quad Ref"<<endl;
    std::cout<<quad_ref<<endl;     
    std::cout<<"Quad"<<endl;
    std::cout<<quad.Matrix()<<endl;     
  }
}


BOOST_AUTO_TEST_CASE(aomatrices_contracted_test) {
  
  std::ofstream basisfile("contracted.xml");
basisfile<<"<basis name=\"cc-pVTZ\">"<<std::endl;
basisfile<<"<element name=\"C\">"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"S\">"<<std::endl;
basisfile<<"			<constant decay=\"8236.0\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.0005424302\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"1235.0\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.0041964279\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"280.8\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.0215409141\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"79.27\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.0836149496\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"25.59\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.2398716189\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"8.997\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.4437518201\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"3.319\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.3535796965\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"0.3643\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.0091763661\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"S\">"<<std::endl;
basisfile<<"			<constant decay=\"8236.0\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.0001963922\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"1235.0\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.0015259503\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"280.8\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.007890449\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"79.27\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.0315148705\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"25.59\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.0969100083\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"8.997\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.2205415263\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"3.319\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.2960691129\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"0.3643\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0405034329\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"S\">"<<std::endl;
basisfile<<"			<constant decay=\"0.9059\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"S\">"<<std::endl;
basisfile<<"			<constant decay=\"0.1285\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"P\">"<<std::endl;
basisfile<<"			<constant decay=\"18.71\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.0394263872\" type=\"P\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"4.133\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.2440889849\" type=\"P\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"1.2\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.8154920089\" type=\"P\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"P\">"<<std::endl;
basisfile<<"			<constant decay=\"0.3827\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"P\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"P\">"<<std::endl;
basisfile<<"			<constant decay=\"0.1209\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"P\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"D\">"<<std::endl;
basisfile<<"			<constant decay=\"1.097\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"D\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"D\">"<<std::endl;
basisfile<<"			<constant decay=\"0.318\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"D\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"F\">"<<std::endl;
basisfile<<"			<constant decay=\"0.761\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"F\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"	</element>"<<std::endl;
basisfile<<"<element name=\"O\">"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"S\">"<<std::endl;
basisfile<<"			<constant decay=\"15330.0\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.0005201983\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"2299.0\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.0040233448\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"522.4\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.0207290833\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"147.3\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.0810823271\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"47.55\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.2362263521\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"16.76\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.4435182094\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"6.207\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.3586705887\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"0.6882\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.0083497972\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"S\">"<<std::endl;
basisfile<<"			<constant decay=\"15330.0\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.000197236\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"2299.0\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.0015350107\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"522.4\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.0079511839\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"147.3\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.0321134529\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"47.55\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.100269643\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"16.76\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.2340471118\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"6.207\">"<<std::endl;
basisfile<<"				<contractions factor=\"-0.3014109278\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"0.6882\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0349196495\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"S\">"<<std::endl;
basisfile<<"			<constant decay=\"1.752\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"S\">"<<std::endl;
basisfile<<"			<constant decay=\"0.2384\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"S\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"P\">"<<std::endl;
basisfile<<"			<constant decay=\"34.46\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.0411634896\" type=\"P\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"7.749\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.2577628359\" type=\"P\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"			<constant decay=\"2.28\">"<<std::endl;
basisfile<<"				<contractions factor=\"0.8024192744\" type=\"P\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"P\">"<<std::endl;
basisfile<<"			<constant decay=\"0.7156\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"P\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"P\">"<<std::endl;
basisfile<<"			<constant decay=\"0.214\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"P\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"D\">"<<std::endl;
basisfile<<"			<constant decay=\"2.314\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"D\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"D\">"<<std::endl;
basisfile<<"			<constant decay=\"0.645\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"D\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"		<shell scale=\"1.0\" type=\"F\">"<<std::endl;
basisfile<<"			<constant decay=\"1.428\">"<<std::endl;
basisfile<<"				<contractions factor=\"1.0\" type=\"F\"/>"<<std::endl;
basisfile<<"			</constant>"<<std::endl;
basisfile<<"		</shell>"<<std::endl;
basisfile<<"	</element>"<<std::endl;
basisfile<<"</basis>"<<std::endl;
basisfile.close();
   
std::ofstream xyzfile("CO.xyz");
xyzfile << " 2" << std::endl;
xyzfile << " CO" << std::endl;
xyzfile << " C            .000000     .000000     .000000" << std::endl;
xyzfile << " O            1.000000     .000000     .000000" << std::endl;
xyzfile.close();
  
  Orbitals orbitals;
  orbitals.QMAtoms().LoadFromXYZ("CO.xyz");
  BasisSet basis;
  basis.LoadBasisSet("contracted.xml");
  AOBasis aobasis;
  aobasis.AOBasisFill(basis,orbitals.QMAtoms());
  AOOverlap overlap;
  overlap.Fill(aobasis);
  Eigen::MatrixXd overlap_ref=Eigen::MatrixXd::Zero(aobasis.AOBasisSize(),aobasis.AOBasisSize());
  overlap_ref<<1,-0.271918,0.510892,0.140478,0,0,0,0,0,0,0,0,0,-1.03366e-18,0,0,0,-2.40323e-18,-2.15779e-19,0,0,0,-6.1362e-19,0,0,0,0,0,0,0,-0.000866723,0.049872,0.00517736,0.0958503,0,0,-0.00841107,0,0,-0.131988,0,0,-0.164398,-0.0116513,0,0,0,0.0201807,-0.11472,0,0,0,0.198701,0,0,0.0807623,0,0,0,-0.104264,
-0.271918,1,0.553776,0.755963,0,0,0,0,0,0,0,0,0,-1.76326e-17,0,0,0,4.90022e-18,-2.92227e-17,0,0,0,2.52937e-17,0,0,0,0,0,0,0,0.0563343,0.348854,0.227081,0.532958,0,0,-0.125059,0,0,-0.343741,0,0,-0.557224,-0.0250044,0,0,0,0.0433088,-0.0707018,0,0,0,0.122459,0,0,-0.0217727,0,0,0,0.0281084,
0.510892,0.553776,1,0.535796,0,0,0,0,0,0,0,0,0,-7.03191e-18,0,0,0,-5.56813e-18,-1.2648e-17,0,0,0,9.82214e-18,0,0,0,0,0,0,0,0.0172188,0.238866,0.10942,0.373096,0,0,-0.117877,0,0,-0.42401,0,0,-0.53145,-0.0629929,0,0,0,0.109107,-0.231295,0,0,0,0.400614,0,0,0.113239,0,0,0,-0.146191,
0.140478,0.755963,0.535796,1,0,0,0,0,0,0,0,0,0,-1.36807e-17,0,0,0,-9.27963e-18,-1.75168e-17,0,0,0,5.2746e-17,0,0,0,0,0,0,0,0.0569073,0.39493,0.233771,0.691653,0,0,-0.0513646,0,0,-0.200889,0,0,-0.469246,-0.00510159,0,0,0,0.00883621,-0.0321538,0,0,0,0.055692,0,0,0.00219694,0,0,0,-0.00283624,
0,0,0,0,1,0,0,0.611573,0,0,0.221927,0,0,0,0,0,0,0,0,0,0,0,0,3.29676e-17,0,0,0,1.39237e-17,0,0,0,0,0,0,0.0377431,0,0,0.163474,0,0,0.200357,0,0,0,0,-0.0875394,0,0,0,0,-0.354382,0,0,-0.147275,0,0,0,0.190131,0,0,
0,0,0,0,0,1,0,0,0.611573,0,0,0.221927,0,0,0,0,0,0,0,0,0,0,0,0,-9.20283e-18,0,0,0,-2.14641e-18,0,0,0,0,0,0,0.0377431,0,0,0.163474,0,0,0.200357,0,0,0,0,-0.0875394,0,0,0,0,-0.354382,0,0,-0.0601247,0,0,0,0.232862,0,
0,0,0,0,0,0,1,0,0,0.611573,0,0,0.221927,0,0,0,0,0,0,0,0,0,0,0,0,-5.87924e-17,0,0,0,2.37699e-17,0.0269792,0.251782,0.159472,0.190767,0,0,-0.182484,0,0,-0.373948,0,0,-0.0618761,-0.0979856,0,0,0,0.169716,-0.11195,0,0,0,0.193902,0,0,0.120998,0,0,0,-0.156208,
0,0,0,0,0.611573,0,0,1,0,0,0.674476,0,0,0,0,0,0,0,0,0,0,0,0,6.1841e-17,0,0,0,2.65563e-17,0,0,0,0,0,0,0.111063,0,0,0.36389,0,0,0.551967,0,0,0,0,-0.102768,0,0,0,0,-0.440683,0,0,-0.0723628,0,0,0,0.09342,0,0,
0,0,0,0,0,0.611573,0,0,1,0,0,0.674476,0,0,0,0,0,0,0,0,0,0,0,0,-1.55499e-17,0,0,0,-1.45608e-17,0,0,0,0,0,0,0.111063,0,0,0.36389,0,0,0.551967,0,0,0,0,-0.102768,0,0,0,0,-0.440683,0,0,-0.029542,0,0,0,0.114416,0,
0,0,0,0,0,0,0.611573,0,0,1,0,0,0.674476,0,0,0,0,0,0,0,0,0,0,0,0,-1.55499e-17,0,0,0,2.26673e-17,0.120003,0.51987,0.420018,0.509463,0,0,-0.151113,0,0,-0.284155,0,0,0.0108926,-0.0102469,0,0,0,0.0177481,0.0361981,0,0,0,-0.0626969,0,0,-0.0249453,0,0,0,0.0322042,
0,0,0,0,0.221927,0,0,0.674476,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,-7.42073e-17,0,0,0,-1.76554e-17,0,0,0,0,0,0,0.0725491,0,0,0.286667,0,0,0.686315,0,0,0,0,-0.0235625,0,0,0,0,-0.151246,0,0,-0.006816,0,0,0,0.00879942,0,0,
0,0,0,0,0,0.221927,0,0,0.674476,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,5.14131e-17,0,0,0,2.88879e-17,0,0,0,0,0,0,0.0725491,0,0,0.286667,0,0,0.686315,0,0,0,0,-0.0235625,0,0,0,0,-0.151246,0,0,-0.00278262,0,0,0,0.010777,0,
0,0,0,0,0,0,0.221927,0,0,0.674476,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,5.14131e-17,0,0,0,-3.38855e-17,0.0730527,0.429056,0.282817,0.601505,0,0,0.0129007,0,0,0.0749109,0,0,0.307632,0.00802212,0,0,0,-0.0138947,0.0555727,0,0,0,-0.0962548,0,0,-0.00613266,0,0,0,0.00791723,
-1.03366e-18,-1.76326e-17,-7.03191e-18,-1.36807e-17,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.531577,0,0,0,0,0,0,0,0,0,0,0,-0.0432145,-0.116667,-0.147649,-0.0480174,0,0,0.13751,0,0,0.0992519,0,0,-0.033332,0.0874369,0,0,0,-0.0557465,0.152394,0,0,0,0.0955023,0,0,-0.161597,0,0,0,-0.0850777,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.531577,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0552516,0,0,0,0,0.207533,0,0,0,0,0,0,-0.207676,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.531577,0,0,0,0,0,0,0,0,0,0,0,0,0,0.139745,0,0,0.314518,0,0,0.16013,0,0,0,0,-0.238419,0,0,0,0,-0.394517,0,0,-0.195531,0,0,0,0.252429,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.531577,0,0,0,0,0,0,0,0,0,0,0,0,0,0.139745,0,0,0.314518,0,0,0.16013,0,0,0,0,-0.238419,0,0,0,0,-0.394517,0,0,-0.0798252,0,0,0,0.309162,0,
-2.40323e-18,4.90022e-18,-5.56813e-18,-9.27963e-18,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.531577,0,0,0,0,0,0,0,0.0748498,0.202073,0.255736,0.0831686,0,0,-0.238175,0,0,-0.171909,0,0,0.0577327,-0.0557465,0,0,0,0.151807,0.0955023,0,0,0,0.0421176,0,0,-0.0484708,0,0,0,-0.106991,
-2.15779e-19,-2.92227e-17,-1.2648e-17,-1.75168e-17,0,0,0,0,0,0,0,0,0,0.531577,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,-0.072097,-0.210683,-0.22002,-0.145708,0,0,0.000532288,0,0,-0.0679184,0,0,-0.162182,0.0549287,0,0,0,0.0475695,0.258668,0,0,0,0.205292,0,0,-0.0977222,0,0,0,-0.0595372,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.531577,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.082393,0,0,0,0,0.377193,0,0,0,0,0,0,-0.131307,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.531577,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0.209928,0,0,0.55027,0,0,0.517137,0,0,0,0,-0.0821285,0,0,0,0,-0.196596,0,0,0.00724467,0,0,0,-0.00935283,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.531577,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0.209928,0,0,0.55027,0,0,0.517137,0,0,0,0,-0.0821285,0,0,0,0,-0.196596,0,0,0.00295762,0,0,0,-0.0114548,0,
-6.1362e-19,2.52937e-17,9.82214e-18,5.2746e-17,0,0,0,0,0,0,0,0,0,0,0,0,0,0.531577,0,0,0,0,1,0,0,0,0,0,0,0,0.124876,0.364913,0.381086,0.252373,0,0,-0.00092195,0,0,0.117638,0,0,0.280908,0.0475695,0,0,0,2.12329e-07,0.205292,0,0,0,0.0216172,0,0,-0.0383546,0,0,0,-0.0576961,
0,0,0,0,3.29676e-17,0,0,6.1841e-17,0,0,-7.42073e-17,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-8.10251e-17,0,0,0,0,0,0,-0.192085,0,0,-0.264617,0,0,-0.0696422,0,0,0,0,0.155205,0,0,0,0,0.0820908,0,0,0.103449,0,0,0,0.0425565,0,0,
0,0,0,0,0,-9.20283e-18,0,0,-1.55499e-17,0,0,5.14131e-17,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4.73439e-17,0,0,0,0,0,0,-0.0784183,0,0,-0.10803,0,0,-0.0284313,0,0,0,0,0.063362,0,0,0,0,0.0335134,0,0,0.130919,0,0,0,0.0212783,0,
0,0,0,0,0,0,-5.87924e-17,0,0,-1.55499e-17,0,0,5.14131e-17,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-5.19105e-17,-0.116793,-0.091806,-0.254377,-0.0316558,0,0,0.091223,0,0,-0.0395362,0,0,-0.0513768,0.14167,0,0,0,0.0577781,0.299168,0,0,0,0.161101,0,0,-0.258515,0,0,0,-0.114568,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.191734,0,0,0,0,0.429612,0,0,0,0,0,0,-0.347259,0,0,0,
0,0,0,0,1.39237e-17,0,0,2.65563e-17,0,0,-1.76554e-17,0,0,0,0,0,0,0,0,0,0,0,0,-8.10251e-17,0,0,0,1,0,0,0,0,0,0,0.24798,0,0,0.34162,0,0,0.0899077,0,0,0,0,-0.200368,0,0,0,0,-0.105979,0,0,0.0425565,0,0,0,0.0814731,0,0,
0,0,0,0,0,-2.14641e-18,0,0,-1.45608e-17,0,0,2.88879e-17,0,0,0,0,0,0,0,0,0,0,0,0,4.73439e-17,0,0,0,1,0,0,0,0,0,0,0.303713,0,0,0.418397,0,0,0.110114,0,0,0,0,-0.2454,0,0,0,0,-0.129797,0,0,0.0212783,0,0,0,0.054003,0,
0,0,0,0,0,0,2.37699e-17,0,0,2.26673e-17,0,0,-3.38855e-17,0,0,0,0,0,0,0,0,0,0,0,0,-5.19105e-17,0,0,0,1,0.15078,0.118521,0.328399,0.0408674,0,0,-0.117768,0,0,0.051041,0,0,0.0663272,0.0882573,0,0,0,0.0819587,0.221338,0,0,0,0.142796,0,0,-0.114568,0,0,0,-0.199352,
-0.000866723,0.0563343,0.0172188,0.0569073,0,0,0.0269792,0,0,0.120003,0,0,0.0730527,-0.0432145,0,0,0,0.0748498,-0.072097,0,0,0,0.124876,0,0,-0.116793,0,0,0,0.15078,1,-0.290301,0.524305,0.141474,0,0,2.66291e-16,0,0,1.3662e-16,0,0,6.04252e-18,-2.42097e-18,0,0,0,-3.93886e-18,-1.12263e-18,0,0,0,-8.46424e-19,0,0,-2.08909e-34,0,0,0,8.03975e-34,
0.049872,0.348854,0.238866,0.39493,0,0,0.251782,0,0,0.51987,0,0,0.429056,-0.116667,0,0,0,0.202073,-0.210683,0,0,0,0.364913,0,0,-0.091806,0,0,0,0.118521,-0.290301,1,0.525245,0.743314,0,0,-1.24084e-16,0,0,-9.31996e-17,0,0,2.05165e-18,2.49347e-17,0,0,0,-2.77177e-17,3.35e-17,0,0,0,-1.68442e-17,0,0,-4.85379e-32,0,0,0,-5.36168e-33,
0.00517736,0.227081,0.10942,0.233771,0,0,0.159472,0,0,0.420018,0,0,0.282817,-0.147649,0,0,0,0.255736,-0.22002,0,0,0,0.381086,0,0,-0.254377,0,0,0,0.328399,0.524305,0.525245,1,0.523317,0,0,-3.01678e-17,0,0,0,0,0,1.00997e-16,-1.44147e-17,0,0,0,-4.69088e-18,-6.27087e-18,0,0,0,-7.41107e-18,0,0,-2.99149e-33,0,0,0,-8.2447e-34,
0.0958503,0.532958,0.373096,0.691653,0,0,0.190767,0,0,0.509463,0,0,0.601505,-0.0480174,0,0,0,0.0831686,-0.145708,0,0,0,0.252373,0,0,-0.0316558,0,0,0,0.0408674,0.141474,0.743314,0.523317,1,0,0,1.85002e-16,0,0,0,0,0,0,-1.36279e-17,0,0,0,2.01349e-18,4.53193e-17,0,0,0,-3.86797e-17,0,0,0,0,0,0,0,
0,0,0,0,0.0377431,0,0,0.111063,0,0,0.0725491,0,0,0,0,0.139745,0,0,0,0,0.209928,0,0,-0.192085,0,0,0,0.24798,0,0,0,0,0,0,1,0,0,0.600184,0,0,0.204174,0,0,0,0,6.64318e-16,0,0,0,0,-1.98763e-16,0,0,-1.09284e-17,0,0,0,1.48059e-17,0,0,
0,0,0,0,0,0.0377431,0,0,0.111063,0,0,0.0725491,0,0,0,0,0.139745,0,0,0,0,0.209928,0,0,-0.0784183,0,0,0,0.303713,0,0,0,0,0,0,1,0,0,0.600184,0,0,0.204174,0,0,0,0,6.64318e-16,0,0,0,0,-1.98763e-16,0,0,2.73805e-17,0,0,0,-8.28042e-18,0,
-0.00841107,-0.125059,-0.117877,-0.0513646,0,0,-0.182484,0,0,-0.151113,0,0,0.0129007,0.13751,0,0,0,-0.238175,0.000532288,0,0,0,-0.00092195,0,0,0.091223,0,0,0,-0.117768,2.66291e-16,-1.24084e-16,-3.01678e-17,1.85002e-16,0,0,1,0,0,0.600184,0,0,0.204174,-3.83544e-16,0,0,0,6.64318e-16,1.14756e-16,0,0,0,-1.98763e-16,0,0,-3.98783e-17,0,0,0,1.59085e-17,
0,0,0,0,0.163474,0,0,0.36389,0,0,0.286667,0,0,0,0,0.314518,0,0,0,0,0.55027,0,0,-0.264617,0,0,0,0.34162,0,0,0,0,0,0,0.600184,0,0,1,0,0,0.650414,0,0,0,0,0,0,0,0,0,0,0,0,-7.5734e-17,0,0,0,-2.0242e-17,0,0,
0,0,0,0,0,0.163474,0,0,0.36389,0,0,0.286667,0,0,0,0,0.314518,0,0,0,0,0.55027,0,0,-0.10803,0,0,0,0.418397,0,0,0,0,0,0,0.600184,0,0,1,0,0,0.650414,0,0,0,0,0,0,0,0,0,0,0,0,-5.62925e-17,0,0,0,-8.26925e-17,0,
-0.131988,-0.343741,-0.42401,-0.200889,0,0,-0.373948,0,0,-0.284155,0,0,0.0749109,0.0992519,0,0,0,-0.171909,-0.0679184,0,0,0,0.117638,0,0,-0.0395362,0,0,0,0.051041,1.3662e-16,-9.31996e-17,0,0,0,0,0.600184,0,0,1,0,0,0.650414,0,0,0,0,0,0,0,0,0,0,0,0,-5.62925e-17,0,0,0,8.13813e-17,
0,0,0,0,0.200357,0,0,0.551967,0,0,0.686315,0,0,0,0,0.16013,0,0,0,0,0.517137,0,0,-0.0696422,0,0,0,0.0899077,0,0,0,0,0,0,0.204174,0,0,0.650414,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,-5.94482e-17,0,0,0,5.64816e-19,0,0,
0,0,0,0,0,0.200357,0,0,0.551967,0,0,0.686315,0,0,0,0,0.16013,0,0,0,0,0.517137,0,0,-0.0284313,0,0,0,0.110114,0,0,0,0,0,0,0.204174,0,0,0.650414,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,4.0753e-17,0,0,0,-2.77993e-18,0,
-0.164398,-0.557224,-0.53145,-0.469246,0,0,-0.0618761,0,0,0.0108926,0,0,0.307632,-0.033332,0,0,0,0.0577327,-0.162182,0,0,0,0.280908,0,0,-0.0513768,0,0,0,0.0663272,6.04252e-18,2.05165e-18,1.00997e-16,0,0,0,0.204174,0,0,0.650414,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,4.0753e-17,0,0,0,-1.75099e-17,
-0.0116513,-0.0250044,-0.0629929,-0.00510159,0,0,-0.0979856,0,0,-0.0102469,0,0,0.00802212,0.0874369,0,0,0,-0.0557465,0.0549287,0,0,0,0.0475695,0,0,0.14167,0,0,0,0.0882573,-2.42097e-18,2.49347e-17,-1.44147e-17,-1.36279e-17,0,0,-3.83544e-16,0,0,0,0,0,0,1,0,0,0,0,0.511638,0,0,0,0,0,0,-1.05101e-15,0,0,0,5.19288e-32,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0552516,0,0,0,0,0.082393,0,0,0,0,0,0,0.191734,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.511638,0,0,0,0,0,0,-9.59437e-16,0,0,0,
0,0,0,0,-0.0875394,0,0,-0.102768,0,0,-0.0235625,0,0,0,0,-0.238419,0,0,0,0,-0.0821285,0,0,0.155205,0,0,0,-0.200368,0,0,0,0,0,0,6.64318e-16,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.511638,0,0,7.43176e-16,0,0,0,-9.59437e-16,0,0,
0,0,0,0,0,-0.0875394,0,0,-0.102768,0,0,-0.0235625,0,0,0,0,-0.238419,0,0,0,0,-0.0821285,0,0,0.063362,0,0,0,-0.2454,0,0,0,0,0,0,6.64318e-16,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.511638,0,0,3.03401e-16,0,0,0,-1.17507e-15,0,
0.0201807,0.0433088,0.109107,0.00883621,0,0,0.169716,0,0,0.0177481,0,0,-0.0138947,-0.0557465,0,0,0,0.151807,0.0475695,0,0,0,2.12329e-07,0,0,0.0577781,0,0,0,0.0819587,-3.93886e-18,-2.77177e-17,-4.69088e-18,2.01349e-18,0,0,6.64318e-16,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.511638,0,0,3.03401e-16,0,0,0,-1.17507e-15,
-0.11472,-0.0707018,-0.231295,-0.0321538,0,0,-0.11195,0,0,0.0361981,0,0,0.0555727,0.152394,0,0,0,0.0955023,0.258668,0,0,0,0.205292,0,0,0.299168,0,0,0,0.221338,-1.12263e-18,3.35e-17,-6.27087e-18,4.53193e-17,0,0,1.14756e-16,0,0,0,0,0,0,0.511638,0,0,0,0,1,0,0,0,0,0,0,-4.44054e-16,0,0,0,-7.20025e-32,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.207533,0,0,0,0,0.377193,0,0,0,0,0,0,0.429612,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.511638,0,0,0,0,1,0,0,0,0,0,0,-4.05364e-16,0,0,0,
0,0,0,0,-0.354382,0,0,-0.440683,0,0,-0.151246,0,0,0,0,-0.394517,0,0,0,0,-0.196596,0,0,0.0820908,0,0,0,-0.105979,0,0,0,0,0,0,-1.98763e-16,0,0,0,0,0,0,0,0,0,0,0.511638,0,0,0,0,1,0,0,3.13994e-16,0,0,0,-4.05364e-16,0,0,
0,0,0,0,0,-0.354382,0,0,-0.440683,0,0,-0.151246,0,0,0,0,-0.394517,0,0,0,0,-0.196596,0,0,0.0335134,0,0,0,-0.129797,0,0,0,0,0,0,-1.98763e-16,0,0,0,0,0,0,0,0,0,0,0.511638,0,0,0,0,1,0,0,1.28187e-16,0,0,0,-4.96468e-16,0,
0.198701,0.122459,0.400614,0.055692,0,0,0.193902,0,0,-0.0626969,0,0,-0.0962548,0.0955023,0,0,0,0.0421176,0.205292,0,0,0,0.0216172,0,0,0.161101,0,0,0,0.142796,-8.46424e-19,-1.68442e-17,-7.41107e-18,-3.86797e-17,0,0,-1.98763e-16,0,0,0,0,0,0,0,0,0,0,0.511638,0,0,0,0,1,0,0,1.28187e-16,0,0,0,-4.96468e-16,
0,0,0,0,-0.147275,0,0,-0.0723628,0,0,-0.006816,0,0,0,0,-0.195531,0,0,0,0,0.00724467,0,0,0.103449,0,0,0,0.0425565,0,0,0,0,0,0,-1.09284e-17,0,0,-7.5734e-17,0,0,-5.94482e-17,0,0,0,0,7.43176e-16,0,0,0,0,3.13994e-16,0,0,1,0,0,0,1.17697e-17,0,0,
0,0,0,0,0,-0.0601247,0,0,-0.029542,0,0,-0.00278262,0,0,0,0,-0.0798252,0,0,0,0,0.00295762,0,0,0.130919,0,0,0,0.0212783,0,0,0,0,0,0,2.73805e-17,0,0,-5.62925e-17,0,0,4.0753e-17,0,0,0,0,3.03401e-16,0,0,0,0,1.28187e-16,0,0,1,0,0,0,7.30382e-17,0,
0.0807623,-0.0217727,0.113239,0.00219694,0,0,0.120998,0,0,-0.0249453,0,0,-0.00613266,-0.161597,0,0,0,-0.0484708,-0.0977222,0,0,0,-0.0383546,0,0,-0.258515,0,0,0,-0.114568,-2.08909e-34,-4.85379e-32,-2.99149e-33,0,0,0,-3.98783e-17,0,0,-5.62925e-17,0,0,4.0753e-17,-1.05101e-15,0,0,0,3.03401e-16,-4.44054e-16,0,0,0,1.28187e-16,0,0,1,0,0,0,-3.6415e-17,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.207676,0,0,0,0,-0.131307,0,0,0,0,0,0,-0.347259,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9.59437e-16,0,0,0,0,-4.05364e-16,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0.190131,0,0,0.09342,0,0,0.00879942,0,0,0,0,0.252429,0,0,0,0,-0.00935283,0,0,0.0425565,0,0,0,0.0814731,0,0,0,0,0,0,1.48059e-17,0,0,-2.0242e-17,0,0,5.64816e-19,0,0,0,0,-9.59437e-16,0,0,0,0,-4.05364e-16,0,0,1.17697e-17,0,0,0,1,0,0,
0,0,0,0,0,0.232862,0,0,0.114416,0,0,0.010777,0,0,0,0,0.309162,0,0,0,0,-0.0114548,0,0,0.0212783,0,0,0,0.054003,0,0,0,0,0,0,-8.28042e-18,0,0,-8.26925e-17,0,0,-2.77993e-18,0,0,0,0,-1.17507e-15,0,0,0,0,-4.96468e-16,0,0,7.30382e-17,0,0,0,1,0,
-0.104264,0.0281084,-0.146191,-0.00283624,0,0,-0.156208,0,0,0.0322042,0,0,0.00791723,-0.0850777,0,0,0,-0.106991,-0.0595372,0,0,0,-0.0576961,0,0,-0.114568,0,0,0,-0.199352,8.03975e-34,-5.36168e-33,-8.2447e-34,0,0,0,1.59085e-17,0,0,8.13813e-17,0,0,-1.75099e-17,5.19288e-32,0,0,0,-1.17507e-15,-7.20025e-32,0,0,0,-4.96468e-16,0,0,-3.6415e-17,0,0,0,1;
  

bool check_overlap = overlap.Matrix().isApprox(overlap_ref,0.0001);
if(!check_overlap){
    std::cout<<std::endl;
  std::cout<<"Ref"<<std::endl;
  std::cout<<overlap_ref<<std::endl;
    std::cout<<"Result"<<std::endl;
  std::cout<<overlap.Matrix()<<std::endl;
}
BOOST_CHECK_EQUAL(check_overlap, 1);



}





BOOST_AUTO_TEST_CASE(aocoulomb_inv_test) {
 Orbitals orbitals;
  orbitals.QMAtoms().LoadFromXYZ("molecule.xyz");
  BasisSet basis;
  basis.LoadBasisSet("3-21G.xml");
  AOBasis aobasis;
  aobasis.AOBasisFill(basis,orbitals.QMAtoms());
  
  AOCoulomb cou;
cou.Fill(aobasis);

Eigen::MatrixXd PseudoInvSqrt=cou.Pseudo_InvSqrt(1e-7);

Eigen::MatrixXd Reformed=PseudoInvSqrt*PseudoInvSqrt*cou.Matrix();
  
bool check_inv = Reformed.isApprox(Eigen::MatrixXd::Identity(17,17),0.0001);
if(!check_inv){
     std::cout<<"reformed"<<endl;
  std::cout<<Reformed<<endl;     
}
BOOST_CHECK_EQUAL(check_inv, 1);

}
BOOST_AUTO_TEST_SUITE_END()
